import 'package:flutter/material.dart';
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';

void main() {
  runApp(ProstheticApp());
}

class ProstheticApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  BluetoothConnection? connection;
  bool isConnected = false;
  String status = "Disconnected";
  
  // Sample modes
  List<String> modes = ["Grip", "Pinch", "Relax"];
  String selectedMode = "Grip";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Prosthetic Arm Controller")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text("Status: $status", style: TextStyle(fontSize: 18)),
            SizedBox(height: 20),
            DropdownButton<String>(
              value: selectedMode,
              onChanged: (String? newMode) {
                setState(() {
                  selectedMode = newMode!;
                  sendMode(selectedMode);
                });
              },
              items: modes.map((String mode) {
                return DropdownMenuItem<String>(
                  value: mode,
                  child: Text(mode),
                );
              }).toList(),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: connectToBluetooth,
              child: Text(isConnected ? "Disconnect" : "Connect"),
            ),
          ],
        ),
      ),
    );
  }

  void connectToBluetooth() async {
    try {
      connection = await BluetoothConnection.toAddress("00:00:00:00:00:00"); // Replace with your prosthetic's Bluetooth address
      setState(() {
        isConnected = true;
        status = "Connected";
      });
    } catch (e) {
      setState(() {
        status = "Connection Failed";
      });
    }
  }

  void sendMode(String mode) {
    if (connection != null && isConnected) {
      connection!.output.add(Uint8List.fromList(mode.codeUnits));
      setState(() {
        status = "Mode: $mode sent";
      });
    } else {
      setState(() {
        status = "Not Connected";
      });
    }
  }
}
